// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

enum UserRole {
  Admin
  Artist
  General
}

model User {
  id              String    @id @default(uuid())
  name            String?
  email           String    @unique
  phone           String?   @unique
  emailVerified   DateTime?
  phoneVerified   Boolean   @default(false)
  image           String?
  accounts        Account[]
  password        String?
  role            UserRole?
  otp             String?
  otpExpiry       DateTime?
  country         String?   @default("India")
  dob             DateTime?
  gender          String?
  bio             String?
  verifiedByAdmin Boolean   @default(false)
  profileSetup    Boolean   @default(false)
  location        String?
  city            String?
  longitude       Float?
  latitude        Float?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  Cart     Cart[]
  Order    Order[]
  Wishlist Wishlist[]
  Product  Product[]
}

model Account {
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user User @relation(fields: [userId], references: [id])

  @@id([provider, providerAccountId])
}

model Product {
  id          String   @id @default(uuid())
  name        String
  description String?
  artistId    String
  price       Float
  image       String?
  stock       Int
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  Cart     Cart[]
  Order    Order[]
  Wishlist Wishlist[]

  user User @relation(fields: [artistId], references: [id], onDelete: Cascade)
}

model Cart {
  id        String   @id @default(uuid())
  userId    String
  productId String
  quantity  Int      @default(1)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user    User    @relation(fields: [userId], references: [id], onDelete: Cascade)
  product Product @relation(fields: [productId], references: [id], onDelete: Cascade)

  @@unique([userId, productId])
}

model Order {
  id        String   @id @default(uuid())
  userId    String
  productId String
  quantity  Int      @default(1)
  paymentId String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user    User    @relation(fields: [userId], references: [id], onDelete: Cascade)
  product Product @relation(fields: [productId], references: [id], onDelete: Cascade)

  @@unique([userId, productId])
}

model Wishlist {
  id        String   @id @default(uuid())
  userId    String
  productId String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user    User    @relation(fields: [userId], references: [id], onDelete: Cascade)
  product Product @relation(fields: [productId], references: [id], onDelete: Cascade)

  @@unique([userId, productId])
}

model DeliveryAddress {
  id         String   @id @default(uuid())
  userId     String
  name       String                     
  phone      String                    
  street     String                
  city       String
  state      String
  postalCode String
  country    String    @default("India")
  landmark   String?                    
  latitude   Float?                     
  longitude  Float?                     
  isDefault  Boolean   @default(false)  

  createdAt  DateTime  @default(now())
  updatedAt  DateTime  @updatedAt

  user       User      @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
}